/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MassService } from "../mass.service";
import { MassCreateInput } from "./MassCreateInput";
import { Mass } from "./Mass";
import { MassFindManyArgs } from "./MassFindManyArgs";
import { MassWhereUniqueInput } from "./MassWhereUniqueInput";
import { MassUpdateInput } from "./MassUpdateInput";

export class MassControllerBase {
  constructor(protected readonly service: MassService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mass })
  async createMass(@common.Body() data: MassCreateInput): Promise<Mass> {
    return await this.service.createMass({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mass] })
  @ApiNestedQuery(MassFindManyArgs)
  async masses(@common.Req() request: Request): Promise<Mass[]> {
    const args = plainToClass(MassFindManyArgs, request.query);
    return this.service.masses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mass(
    @common.Param() params: MassWhereUniqueInput
  ): Promise<Mass | null> {
    const result = await this.service.mass({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMass(
    @common.Param() params: MassWhereUniqueInput,
    @common.Body() data: MassUpdateInput
  ): Promise<Mass | null> {
    try {
      return await this.service.updateMass({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMass(
    @common.Param() params: MassWhereUniqueInput
  ): Promise<Mass | null> {
    try {
      return await this.service.deleteMass({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
