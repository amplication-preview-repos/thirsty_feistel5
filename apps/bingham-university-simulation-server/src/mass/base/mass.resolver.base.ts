/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mass } from "./Mass";
import { MassCountArgs } from "./MassCountArgs";
import { MassFindManyArgs } from "./MassFindManyArgs";
import { MassFindUniqueArgs } from "./MassFindUniqueArgs";
import { CreateMassArgs } from "./CreateMassArgs";
import { UpdateMassArgs } from "./UpdateMassArgs";
import { DeleteMassArgs } from "./DeleteMassArgs";
import { MassService } from "../mass.service";
@graphql.Resolver(() => Mass)
export class MassResolverBase {
  constructor(protected readonly service: MassService) {}

  async _massesMeta(
    @graphql.Args() args: MassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mass])
  async masses(@graphql.Args() args: MassFindManyArgs): Promise<Mass[]> {
    return this.service.masses(args);
  }

  @graphql.Query(() => Mass, { nullable: true })
  async mass(@graphql.Args() args: MassFindUniqueArgs): Promise<Mass | null> {
    const result = await this.service.mass(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mass)
  async createMass(@graphql.Args() args: CreateMassArgs): Promise<Mass> {
    return await this.service.createMass({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Mass)
  async updateMass(@graphql.Args() args: UpdateMassArgs): Promise<Mass | null> {
    try {
      return await this.service.updateMass({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mass)
  async deleteMass(@graphql.Args() args: DeleteMassArgs): Promise<Mass | null> {
    try {
      return await this.service.deleteMass(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
