/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Length } from "./Length";
import { LengthCountArgs } from "./LengthCountArgs";
import { LengthFindManyArgs } from "./LengthFindManyArgs";
import { LengthFindUniqueArgs } from "./LengthFindUniqueArgs";
import { CreateLengthArgs } from "./CreateLengthArgs";
import { UpdateLengthArgs } from "./UpdateLengthArgs";
import { DeleteLengthArgs } from "./DeleteLengthArgs";
import { LengthService } from "../length.service";
@graphql.Resolver(() => Length)
export class LengthResolverBase {
  constructor(protected readonly service: LengthService) {}

  async _lengthsMeta(
    @graphql.Args() args: LengthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Length])
  async lengths(@graphql.Args() args: LengthFindManyArgs): Promise<Length[]> {
    return this.service.lengths(args);
  }

  @graphql.Query(() => Length, { nullable: true })
  async length(
    @graphql.Args() args: LengthFindUniqueArgs
  ): Promise<Length | null> {
    const result = await this.service.length(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Length)
  async createLength(@graphql.Args() args: CreateLengthArgs): Promise<Length> {
    return await this.service.createLength({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Length)
  async updateLength(
    @graphql.Args() args: UpdateLengthArgs
  ): Promise<Length | null> {
    try {
      return await this.service.updateLength({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Length)
  async deleteLength(
    @graphql.Args() args: DeleteLengthArgs
  ): Promise<Length | null> {
    try {
      return await this.service.deleteLength(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
