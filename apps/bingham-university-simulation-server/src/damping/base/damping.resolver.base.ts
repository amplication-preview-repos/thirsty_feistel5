/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Damping } from "./Damping";
import { DampingCountArgs } from "./DampingCountArgs";
import { DampingFindManyArgs } from "./DampingFindManyArgs";
import { DampingFindUniqueArgs } from "./DampingFindUniqueArgs";
import { CreateDampingArgs } from "./CreateDampingArgs";
import { UpdateDampingArgs } from "./UpdateDampingArgs";
import { DeleteDampingArgs } from "./DeleteDampingArgs";
import { DampingService } from "../damping.service";
@graphql.Resolver(() => Damping)
export class DampingResolverBase {
  constructor(protected readonly service: DampingService) {}

  async _dampingsMeta(
    @graphql.Args() args: DampingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Damping])
  async dampings(
    @graphql.Args() args: DampingFindManyArgs
  ): Promise<Damping[]> {
    return this.service.dampings(args);
  }

  @graphql.Query(() => Damping, { nullable: true })
  async damping(
    @graphql.Args() args: DampingFindUniqueArgs
  ): Promise<Damping | null> {
    const result = await this.service.damping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Damping)
  async createDamping(
    @graphql.Args() args: CreateDampingArgs
  ): Promise<Damping> {
    return await this.service.createDamping({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Damping)
  async updateDamping(
    @graphql.Args() args: UpdateDampingArgs
  ): Promise<Damping | null> {
    try {
      return await this.service.updateDamping({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Damping)
  async deleteDamping(
    @graphql.Args() args: DeleteDampingArgs
  ): Promise<Damping | null> {
    try {
      return await this.service.deleteDamping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
