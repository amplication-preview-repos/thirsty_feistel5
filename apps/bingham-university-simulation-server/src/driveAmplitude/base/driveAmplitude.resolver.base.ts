/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DriveAmplitude } from "./DriveAmplitude";
import { DriveAmplitudeCountArgs } from "./DriveAmplitudeCountArgs";
import { DriveAmplitudeFindManyArgs } from "./DriveAmplitudeFindManyArgs";
import { DriveAmplitudeFindUniqueArgs } from "./DriveAmplitudeFindUniqueArgs";
import { CreateDriveAmplitudeArgs } from "./CreateDriveAmplitudeArgs";
import { UpdateDriveAmplitudeArgs } from "./UpdateDriveAmplitudeArgs";
import { DeleteDriveAmplitudeArgs } from "./DeleteDriveAmplitudeArgs";
import { DriveAmplitudeService } from "../driveAmplitude.service";
@graphql.Resolver(() => DriveAmplitude)
export class DriveAmplitudeResolverBase {
  constructor(protected readonly service: DriveAmplitudeService) {}

  async _driveAmplitudesMeta(
    @graphql.Args() args: DriveAmplitudeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DriveAmplitude])
  async driveAmplitudes(
    @graphql.Args() args: DriveAmplitudeFindManyArgs
  ): Promise<DriveAmplitude[]> {
    return this.service.driveAmplitudes(args);
  }

  @graphql.Query(() => DriveAmplitude, { nullable: true })
  async driveAmplitude(
    @graphql.Args() args: DriveAmplitudeFindUniqueArgs
  ): Promise<DriveAmplitude | null> {
    const result = await this.service.driveAmplitude(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DriveAmplitude)
  async createDriveAmplitude(
    @graphql.Args() args: CreateDriveAmplitudeArgs
  ): Promise<DriveAmplitude> {
    return await this.service.createDriveAmplitude({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DriveAmplitude)
  async updateDriveAmplitude(
    @graphql.Args() args: UpdateDriveAmplitudeArgs
  ): Promise<DriveAmplitude | null> {
    try {
      return await this.service.updateDriveAmplitude({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DriveAmplitude)
  async deleteDriveAmplitude(
    @graphql.Args() args: DeleteDriveAmplitudeArgs
  ): Promise<DriveAmplitude | null> {
    try {
      return await this.service.deleteDriveAmplitude(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
