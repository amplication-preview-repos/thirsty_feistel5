/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DriveAmplitudeService } from "../driveAmplitude.service";
import { DriveAmplitudeCreateInput } from "./DriveAmplitudeCreateInput";
import { DriveAmplitude } from "./DriveAmplitude";
import { DriveAmplitudeFindManyArgs } from "./DriveAmplitudeFindManyArgs";
import { DriveAmplitudeWhereUniqueInput } from "./DriveAmplitudeWhereUniqueInput";
import { DriveAmplitudeUpdateInput } from "./DriveAmplitudeUpdateInput";

export class DriveAmplitudeControllerBase {
  constructor(protected readonly service: DriveAmplitudeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DriveAmplitude })
  async createDriveAmplitude(
    @common.Body() data: DriveAmplitudeCreateInput
  ): Promise<DriveAmplitude> {
    return await this.service.createDriveAmplitude({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DriveAmplitude] })
  @ApiNestedQuery(DriveAmplitudeFindManyArgs)
  async driveAmplitudes(
    @common.Req() request: Request
  ): Promise<DriveAmplitude[]> {
    const args = plainToClass(DriveAmplitudeFindManyArgs, request.query);
    return this.service.driveAmplitudes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DriveAmplitude })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async driveAmplitude(
    @common.Param() params: DriveAmplitudeWhereUniqueInput
  ): Promise<DriveAmplitude | null> {
    const result = await this.service.driveAmplitude({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DriveAmplitude })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDriveAmplitude(
    @common.Param() params: DriveAmplitudeWhereUniqueInput,
    @common.Body() data: DriveAmplitudeUpdateInput
  ): Promise<DriveAmplitude | null> {
    try {
      return await this.service.updateDriveAmplitude({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DriveAmplitude })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDriveAmplitude(
    @common.Param() params: DriveAmplitudeWhereUniqueInput
  ): Promise<DriveAmplitude | null> {
    try {
      return await this.service.deleteDriveAmplitude({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
