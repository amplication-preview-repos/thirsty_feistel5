/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DriveAmplitude as PrismaDriveAmplitude } from "@prisma/client";

export class DriveAmplitudeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DriveAmplitudeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.driveAmplitude.count(args);
  }

  async driveAmplitudes(
    args: Prisma.DriveAmplitudeFindManyArgs
  ): Promise<PrismaDriveAmplitude[]> {
    return this.prisma.driveAmplitude.findMany(args);
  }
  async driveAmplitude(
    args: Prisma.DriveAmplitudeFindUniqueArgs
  ): Promise<PrismaDriveAmplitude | null> {
    return this.prisma.driveAmplitude.findUnique(args);
  }
  async createDriveAmplitude(
    args: Prisma.DriveAmplitudeCreateArgs
  ): Promise<PrismaDriveAmplitude> {
    return this.prisma.driveAmplitude.create(args);
  }
  async updateDriveAmplitude(
    args: Prisma.DriveAmplitudeUpdateArgs
  ): Promise<PrismaDriveAmplitude> {
    return this.prisma.driveAmplitude.update(args);
  }
  async deleteDriveAmplitude(
    args: Prisma.DriveAmplitudeDeleteArgs
  ): Promise<PrismaDriveAmplitude> {
    return this.prisma.driveAmplitude.delete(args);
  }
}
