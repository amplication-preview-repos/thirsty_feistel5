/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GravityService } from "../gravity.service";
import { GravityCreateInput } from "./GravityCreateInput";
import { Gravity } from "./Gravity";
import { GravityFindManyArgs } from "./GravityFindManyArgs";
import { GravityWhereUniqueInput } from "./GravityWhereUniqueInput";
import { GravityUpdateInput } from "./GravityUpdateInput";

export class GravityControllerBase {
  constructor(protected readonly service: GravityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gravity })
  async createGravity(
    @common.Body() data: GravityCreateInput
  ): Promise<Gravity> {
    return await this.service.createGravity({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gravity] })
  @ApiNestedQuery(GravityFindManyArgs)
  async gravities(@common.Req() request: Request): Promise<Gravity[]> {
    const args = plainToClass(GravityFindManyArgs, request.query);
    return this.service.gravities({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gravity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gravity(
    @common.Param() params: GravityWhereUniqueInput
  ): Promise<Gravity | null> {
    const result = await this.service.gravity({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gravity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGravity(
    @common.Param() params: GravityWhereUniqueInput,
    @common.Body() data: GravityUpdateInput
  ): Promise<Gravity | null> {
    try {
      return await this.service.updateGravity({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gravity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGravity(
    @common.Param() params: GravityWhereUniqueInput
  ): Promise<Gravity | null> {
    try {
      return await this.service.deleteGravity({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
