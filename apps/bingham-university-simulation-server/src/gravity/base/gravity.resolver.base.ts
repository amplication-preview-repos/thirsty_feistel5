/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gravity } from "./Gravity";
import { GravityCountArgs } from "./GravityCountArgs";
import { GravityFindManyArgs } from "./GravityFindManyArgs";
import { GravityFindUniqueArgs } from "./GravityFindUniqueArgs";
import { CreateGravityArgs } from "./CreateGravityArgs";
import { UpdateGravityArgs } from "./UpdateGravityArgs";
import { DeleteGravityArgs } from "./DeleteGravityArgs";
import { GravityService } from "../gravity.service";
@graphql.Resolver(() => Gravity)
export class GravityResolverBase {
  constructor(protected readonly service: GravityService) {}

  async _gravitiesMeta(
    @graphql.Args() args: GravityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gravity])
  async gravities(
    @graphql.Args() args: GravityFindManyArgs
  ): Promise<Gravity[]> {
    return this.service.gravities(args);
  }

  @graphql.Query(() => Gravity, { nullable: true })
  async gravity(
    @graphql.Args() args: GravityFindUniqueArgs
  ): Promise<Gravity | null> {
    const result = await this.service.gravity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gravity)
  async createGravity(
    @graphql.Args() args: CreateGravityArgs
  ): Promise<Gravity> {
    return await this.service.createGravity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Gravity)
  async updateGravity(
    @graphql.Args() args: UpdateGravityArgs
  ): Promise<Gravity | null> {
    try {
      return await this.service.updateGravity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gravity)
  async deleteGravity(
    @graphql.Args() args: DeleteGravityArgs
  ): Promise<Gravity | null> {
    try {
      return await this.service.deleteGravity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
