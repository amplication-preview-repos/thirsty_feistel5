/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeService } from "../time.service";
import { TimeCreateInput } from "./TimeCreateInput";
import { Time } from "./Time";
import { TimeFindManyArgs } from "./TimeFindManyArgs";
import { TimeWhereUniqueInput } from "./TimeWhereUniqueInput";
import { TimeUpdateInput } from "./TimeUpdateInput";

export class TimeControllerBase {
  constructor(protected readonly service: TimeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Time })
  async createTime(@common.Body() data: TimeCreateInput): Promise<Time> {
    return await this.service.createTime({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Time] })
  @ApiNestedQuery(TimeFindManyArgs)
  async times(@common.Req() request: Request): Promise<Time[]> {
    const args = plainToClass(TimeFindManyArgs, request.query);
    return this.service.times({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Time })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async time(
    @common.Param() params: TimeWhereUniqueInput
  ): Promise<Time | null> {
    const result = await this.service.time({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Time })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTime(
    @common.Param() params: TimeWhereUniqueInput,
    @common.Body() data: TimeUpdateInput
  ): Promise<Time | null> {
    try {
      return await this.service.updateTime({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Time })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTime(
    @common.Param() params: TimeWhereUniqueInput
  ): Promise<Time | null> {
    try {
      return await this.service.deleteTime({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
