/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Time } from "./Time";
import { TimeCountArgs } from "./TimeCountArgs";
import { TimeFindManyArgs } from "./TimeFindManyArgs";
import { TimeFindUniqueArgs } from "./TimeFindUniqueArgs";
import { CreateTimeArgs } from "./CreateTimeArgs";
import { UpdateTimeArgs } from "./UpdateTimeArgs";
import { DeleteTimeArgs } from "./DeleteTimeArgs";
import { TimeService } from "../time.service";
@graphql.Resolver(() => Time)
export class TimeResolverBase {
  constructor(protected readonly service: TimeService) {}

  async _timesMeta(
    @graphql.Args() args: TimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Time])
  async times(@graphql.Args() args: TimeFindManyArgs): Promise<Time[]> {
    return this.service.times(args);
  }

  @graphql.Query(() => Time, { nullable: true })
  async time(@graphql.Args() args: TimeFindUniqueArgs): Promise<Time | null> {
    const result = await this.service.time(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Time)
  async createTime(@graphql.Args() args: CreateTimeArgs): Promise<Time> {
    return await this.service.createTime({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Time)
  async updateTime(@graphql.Args() args: UpdateTimeArgs): Promise<Time | null> {
    try {
      return await this.service.updateTime({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Time)
  async deleteTime(@graphql.Args() args: DeleteTimeArgs): Promise<Time | null> {
    try {
      return await this.service.deleteTime(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
