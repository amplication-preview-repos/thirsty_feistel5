/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DriveFrequency as PrismaDriveFrequency } from "@prisma/client";

export class DriveFrequencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DriveFrequencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.driveFrequency.count(args);
  }

  async driveFrequencies(
    args: Prisma.DriveFrequencyFindManyArgs
  ): Promise<PrismaDriveFrequency[]> {
    return this.prisma.driveFrequency.findMany(args);
  }
  async driveFrequency(
    args: Prisma.DriveFrequencyFindUniqueArgs
  ): Promise<PrismaDriveFrequency | null> {
    return this.prisma.driveFrequency.findUnique(args);
  }
  async createDriveFrequency(
    args: Prisma.DriveFrequencyCreateArgs
  ): Promise<PrismaDriveFrequency> {
    return this.prisma.driveFrequency.create(args);
  }
  async updateDriveFrequency(
    args: Prisma.DriveFrequencyUpdateArgs
  ): Promise<PrismaDriveFrequency> {
    return this.prisma.driveFrequency.update(args);
  }
  async deleteDriveFrequency(
    args: Prisma.DriveFrequencyDeleteArgs
  ): Promise<PrismaDriveFrequency> {
    return this.prisma.driveFrequency.delete(args);
  }
}
