/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DriveFrequency } from "./DriveFrequency";
import { DriveFrequencyCountArgs } from "./DriveFrequencyCountArgs";
import { DriveFrequencyFindManyArgs } from "./DriveFrequencyFindManyArgs";
import { DriveFrequencyFindUniqueArgs } from "./DriveFrequencyFindUniqueArgs";
import { CreateDriveFrequencyArgs } from "./CreateDriveFrequencyArgs";
import { UpdateDriveFrequencyArgs } from "./UpdateDriveFrequencyArgs";
import { DeleteDriveFrequencyArgs } from "./DeleteDriveFrequencyArgs";
import { DriveFrequencyService } from "../driveFrequency.service";
@graphql.Resolver(() => DriveFrequency)
export class DriveFrequencyResolverBase {
  constructor(protected readonly service: DriveFrequencyService) {}

  async _driveFrequenciesMeta(
    @graphql.Args() args: DriveFrequencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DriveFrequency])
  async driveFrequencies(
    @graphql.Args() args: DriveFrequencyFindManyArgs
  ): Promise<DriveFrequency[]> {
    return this.service.driveFrequencies(args);
  }

  @graphql.Query(() => DriveFrequency, { nullable: true })
  async driveFrequency(
    @graphql.Args() args: DriveFrequencyFindUniqueArgs
  ): Promise<DriveFrequency | null> {
    const result = await this.service.driveFrequency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DriveFrequency)
  async createDriveFrequency(
    @graphql.Args() args: CreateDriveFrequencyArgs
  ): Promise<DriveFrequency> {
    return await this.service.createDriveFrequency({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DriveFrequency)
  async updateDriveFrequency(
    @graphql.Args() args: UpdateDriveFrequencyArgs
  ): Promise<DriveFrequency | null> {
    try {
      return await this.service.updateDriveFrequency({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DriveFrequency)
  async deleteDriveFrequency(
    @graphql.Args() args: DeleteDriveFrequencyArgs
  ): Promise<DriveFrequency | null> {
    try {
      return await this.service.deleteDriveFrequency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
