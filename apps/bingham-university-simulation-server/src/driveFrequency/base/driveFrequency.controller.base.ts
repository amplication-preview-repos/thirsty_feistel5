/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DriveFrequencyService } from "../driveFrequency.service";
import { DriveFrequencyCreateInput } from "./DriveFrequencyCreateInput";
import { DriveFrequency } from "./DriveFrequency";
import { DriveFrequencyFindManyArgs } from "./DriveFrequencyFindManyArgs";
import { DriveFrequencyWhereUniqueInput } from "./DriveFrequencyWhereUniqueInput";
import { DriveFrequencyUpdateInput } from "./DriveFrequencyUpdateInput";

export class DriveFrequencyControllerBase {
  constructor(protected readonly service: DriveFrequencyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DriveFrequency })
  async createDriveFrequency(
    @common.Body() data: DriveFrequencyCreateInput
  ): Promise<DriveFrequency> {
    return await this.service.createDriveFrequency({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DriveFrequency] })
  @ApiNestedQuery(DriveFrequencyFindManyArgs)
  async driveFrequencies(
    @common.Req() request: Request
  ): Promise<DriveFrequency[]> {
    const args = plainToClass(DriveFrequencyFindManyArgs, request.query);
    return this.service.driveFrequencies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DriveFrequency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async driveFrequency(
    @common.Param() params: DriveFrequencyWhereUniqueInput
  ): Promise<DriveFrequency | null> {
    const result = await this.service.driveFrequency({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DriveFrequency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDriveFrequency(
    @common.Param() params: DriveFrequencyWhereUniqueInput,
    @common.Body() data: DriveFrequencyUpdateInput
  ): Promise<DriveFrequency | null> {
    try {
      return await this.service.updateDriveFrequency({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DriveFrequency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDriveFrequency(
    @common.Param() params: DriveFrequencyWhereUniqueInput
  ): Promise<DriveFrequency | null> {
    try {
      return await this.service.deleteDriveFrequency({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
